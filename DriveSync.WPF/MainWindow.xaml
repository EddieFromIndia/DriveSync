<Window x:Class="DriveSync.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:DriveSync"
        mc:Ignorable="d"
        Icon="Assets\logo.png"
        Title="Drive Sync"
        Height="600" MinHeight="480"
        Width="880" MinWidth="880"
        WindowStartupLocation="CenterScreen">

    <Window.Resources>
        <!--Scroll Bar Begin-->
        <SolidColorBrush x:Key="StandardBorderBrush" Color="#888" />
        <SolidColorBrush x:Key="StandardBackgroundBrush" Color="Black" />
        <SolidColorBrush x:Key="HoverBorderBrush" Color="#DDD" />
        <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="Gray" />
        <SolidColorBrush x:Key="SelectedForegroundBrush" Color="White" />
        <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
        <SolidColorBrush x:Key="GlyphBrush" Color="#404" />
        <SolidColorBrush x:Key="NormalBrush" Color="#FFDCE3E9" />
        <SolidColorBrush x:Key="NormalBorderBrush" Color="#888" />
        <SolidColorBrush x:Key="HorizontalNormalBrush" Color="#FFDCE3E9" />
        <SolidColorBrush x:Key="HorizontalNormalBorderBrush" Color="#888" />

        <LinearGradientBrush x:Key="ListBoxBackgroundBrush" StartPoint="0,0" EndPoint="1,0.001">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="White" Offset="0.0" />
                    <GradientStop Color="White" Offset="0.6" />
                    <GradientStop Color="#DDDDDD" Offset="1.2"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="StandardBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#CCC" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#BBB" Offset="0.0"/>
                    <GradientStop Color="#EEE" Offset="0.1"/>
                    <GradientStop Color="#EEE" Offset="0.9"/>
                    <GradientStop Color="#FFF" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="Visibility" Value="Hidden"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Name="Border" Margin="1" CornerRadius="2" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" BorderThickness="1">
                            <Path HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{StaticResource GlyphBrush}" Data="{Binding Path=Content, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="Visibility" Value="Hidden"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RepeatButton}">
                        <Border Background="Black" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border CornerRadius="4" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0"  Width="8" Margin="8,0,-2,0"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition MaxHeight="0"/>
                    <RowDefinition Height="0.00001*"/>
                    <RowDefinition MaxHeight="0"/>
                </Grid.RowDefinitions>
                <Border Grid.RowSpan="3" CornerRadius="2" Background="Transparent" />
                <RepeatButton Grid.Row="0" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineUpCommand" Content="M 0 4 L 8 4 L 4 0 Z" />
                <Track Name="PART_Track" Grid.Row="1" IsDirectionReversed="true">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="1,0,1,0" Background="{StaticResource HorizontalNormalBrush}" BorderBrush="{StaticResource HorizontalNormalBorderBrush}" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Row="3" Style="{StaticResource ScrollBarLineButton}" Height="18" Command="ScrollBar.LineDownCommand" Content="M 0 0 L 4 4 L 8 0 Z"/>
            </Grid>
        </ControlTemplate>
        <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MaxWidth="18"/>
                    <ColumnDefinition Width="0.00001*"/>
                    <ColumnDefinition MaxWidth="18"/>
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="3" CornerRadius="2" Background="#F0F0F0"/>
                <RepeatButton Grid.Column="0"  Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineLeftCommand" Content="M 4 0 L 4 8 L 0 4 Z" />
                <Track Name="PART_Track" Grid.Column="1" IsDirectionReversed="False">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                    </Track.DecreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0,1,0,1" Background="{StaticResource NormalBrush}" BorderBrush="{StaticResource NormalBorderBrush}" />
                    </Track.Thumb>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                    </Track.IncreaseRepeatButton>
                </Track>
                <RepeatButton Grid.Column="3" Style="{StaticResource ScrollBarLineButton}" Width="18" Command="ScrollBar.LineRightCommand" Content="M 0 0 L 4 4 L 0 8 Z"/>
            </Grid>
        </ControlTemplate>
        <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Style.Triggers>
                <Trigger Property="Orientation" Value="Horizontal">
                    <Setter Property="Width" Value="Auto"/>
                    <Setter Property="Height" Value="18" />
                    <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
                </Trigger>
                <Trigger Property="Orientation" Value="Vertical">
                    <Setter Property="Width" Value="18"/>
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="FavsScrollViewer" TargetType="{x:Type ScrollViewer}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Grid.Column="1"/>
                            <ScrollBar Name="PART_VerticalScrollBar" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1" Grid.Column="1" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--Scroll Bar End-->

        <!--<Style x:Key="ManualResolveButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Padding" Value="0" />
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Right" />
            <Setter Property="Visibility" Value="Hidden" />
            <Setter Property="Opacity" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}, AncestorLevel=1}}" Value="True" />
                        <Condition Binding="{Binding Path=DataContext.Status, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}, AncestorLevel=1}}" Value="{x:Static model:ItemStatus.ExistsButDifferent}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Opacity" Value="0.5" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}, AncestorLevel=1}}" Value="True" />
                        <Condition Binding="{Binding Path=DataContext.Status, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}, AncestorLevel=1}}" Value="{x:Static model:ItemStatus.ExistsWithDifferentName}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Opacity" Value="0.5" />
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}, AncestorLevel=1}}" Value="True" />
                        <Condition Binding="{Binding Path=DataContext.Status, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}, AncestorLevel=1}}" Value="{x:Static model:ItemStatus.DoesNotExist}" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Opacity" Value="0.5" />
                </MultiDataTrigger>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Opacity" Value="0.9" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Opacity" Value="1" />
                </Trigger>
            </Style.Triggers>
        </Style>-->

        <!-- Style to hide tool tips that have an empty content. -->
        <Style TargetType="ToolTip">
            <Style.Triggers>
                <Trigger Property="Content"
                 Value="{x:Static sys:String.Empty}">
                    <Setter Property="Visibility"
                    Value="Collapsed" />
                </Trigger>
                <Trigger Property="Content"
                 Value="{x:Null}">
                    <Setter Property="Visibility"
                    Value="Collapsed" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Grid Style="{DynamicResource MainBodyStyle}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="30" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="30" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="30" />
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="75" /> <!--Menu-->
            <RowDefinition Height="40" /> <!--Source & Target Label-->
            <RowDefinition Height="30" /> <!--Source & Target TextBox-->
            <RowDefinition Height="15" /> <!--Padding-->
            <RowDefinition Height="30" /> <!--Address Display-->
            <RowDefinition Height="*" /> <!--Description Area-->
            <RowDefinition Height="20" /> <!--Padding-->
            <RowDefinition Height="30" /> <!--Buttons-->
            <RowDefinition Height="10" /> <!--Padding-->
            <RowDefinition Height="30" /> <!--Footer-->
        </Grid.RowDefinitions>

        <!--Menu-->
        <StackPanel Grid.Column="0"
                    Grid.Row="0"
                    Grid.ColumnSpan="5"
                    Orientation="Horizontal"
                    Style="{DynamicResource HeaderStyle}">

            <Button Style="{DynamicResource HeaderButton}"
                    Width="65"
                    Margin="30 2 0 0"
                    Command="{Binding RefreshButton_Click}"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Refresh">
                <StackPanel>
                    <Image Source="/Assets/refresh.png" Width="28" Margin="4" />
                    <TextBlock Text="Refresh" TextAlignment="Center" TextWrapping="WrapWithOverflow" />
                </StackPanel>
            </Button>
            <Button Style="{DynamicResource HeaderButton}"
                    Width="70"
                    Margin="0 2 0 0"
                    Command="{Binding VisibilityButton_Click}"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Show/hide folders and files that have no discrepancies.">
                <StackPanel>
                    <Image Width="36" Source="{Binding ShowEqualEntries,
                                Converter={x:Static local:BooleanToImageConverter.Instance},
                                ConverterParameter='visibility'}" />
                    <TextBlock Text="{Binding ShowEqualEntries,
                                Converter={x:Static local:BooleanToTextConverter.Instance},
                                ConverterParameter='visibility',
                                FallbackValue='Hide equal files/folders'}" TextAlignment="Center" TextWrapping="WrapWithOverflow" />
                </StackPanel>
            </Button>
            <Button Style="{DynamicResource HeaderButton}"
                    Width="70"
                    Margin="0 2 0 0"
                    Command="{Binding ShowHideEmptyFolderButton_Click}"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Show/hide empty folders">
                <StackPanel>
                    <Image Width="36" Source="{Binding ShowEmptyFolder,
                                Converter={x:Static local:BooleanToImageConverter.Instance},
                                ConverterParameter='folder-empty'}" />
                    <TextBlock Text="{Binding ShowEmptyFolder,
                                Converter={x:Static local:BooleanToTextConverter.Instance},
                                ConverterParameter='folder-empty',
                                FallbackValue='Hide empty folders'}" TextAlignment="Center" TextWrapping="WrapWithOverflow" />
                </StackPanel>
            </Button>

            <Line Style="{DynamicResource LineSeparatorStyle}" Margin="20 0 10 0" />

            <Button Style="{DynamicResource HeaderButton}"
                    Width="65"
                    Margin="0 2 0 0"
                    Command="{Binding SettingsButton_Click}"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Settings">
                <StackPanel>
                    <Image Source="/Assets/settings.png" Width="32" Margin="2" />
                    <TextBlock Text="Settings" TextAlignment="Center" TextWrapping="WrapWithOverflow" />
                </StackPanel>
            </Button>
            <Button Style="{DynamicResource HeaderButton}"
                    Width="65"
                    Margin="0 2 0 0"
                    Command="{Binding UpdateButton_Click}"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Check for updates">
                <StackPanel>
                    <Image Source="/Assets/update.png" Width="32" Margin="2" />
                    <TextBlock Text="Check for updates" TextAlignment="Center" TextWrapping="WrapWithOverflow" />
                </StackPanel>
            </Button>

            <Line Style="{DynamicResource LineSeparatorStyle}" Margin="20 0 10 0" />

            <Button Style="{DynamicResource HeaderButton}"
                    Width="65"
                    Margin="0 2 0 0"
                    Command="{Binding TutorialButton_Click}"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Tutorials">
                <StackPanel>
                    <Image Source="/Assets/tutorial.png" Width="32" Margin="2" />
                    <TextBlock Text="Tutorials" TextAlignment="Center" TextWrapping="WrapWithOverflow" />
                </StackPanel>
            </Button>
        </StackPanel>

        <!--Source-->
        <TextBlock Grid.Column="1"
                   Grid.Row="1"
                   Margin="0 10 0 0"
                   Text="Source:"
                   VerticalAlignment="Center" />
        <Grid Grid.Column="1"
              Grid.Row="2"
              HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>

            <TextBox Grid.Column="0"
                     Style="{DynamicResource DefaultTextBoxStyle}"
                     VerticalContentAlignment="Center"
                     Text="{Binding SourcePath}" />
            <Button Grid.Column="2"
                    Style="{StaticResource ImageButton}"
                    Width="30"
                    Command="{Binding BrowseButton_Click}"
                    CommandParameter="Source"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Browse">
                <Image Source="/Assets/folder-open.png" />
            </Button>
        </Grid>
        
        <!--Target-->
        <TextBlock Grid.Column="3"
                   Grid.Row="1"
                   Text="Target:"
                   Margin="0 10 0 0"
                   VerticalAlignment="Center" />
        <Grid Grid.Column="3"
              Grid.Row="2"
              HorizontalAlignment="Stretch">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="10" />
                <ColumnDefinition Width="30" />
            </Grid.ColumnDefinitions>

            <TextBox Grid.Column="0"
                     Style="{DynamicResource DefaultTextBoxStyle}"
                     VerticalContentAlignment="Center"
                     Text="{Binding TargetPath}" />
            <Button Grid.Column="2"
                    Style="{StaticResource ImageButton}"
                    Width="30"
                    Command="{Binding BrowseButton_Click}"
                    CommandParameter="Target"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Browse">
                <Image Source="/Assets/folder-open.png" />
            </Button>
        </Grid>
        
        <!--Address Display Area-->
        <Border Grid.Column="1"
                Grid.Row="4"
                Style="{DynamicResource AddressAreaStyle}">
            <Grid Visibility="{Binding LastSourcePath,
                               Converter={x:Static local:StringToVisibilityConverter.Instance},
                               FallbackValue=Hidden}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0"
                        Style="{StaticResource ImageButton}"
                        Margin="5"
                        Command="{Binding BackButton_Click}"
                        CommandParameter="Target"
                        ToolTipService.InitialShowDelay="500"
                        ToolTipService.BetweenShowDelay="500"
                        ToolTipService.ShowOnDisabled="True"
                        ToolTip="Up one level">
                    <Image Source="{Binding Path=IsEnabled,
                                    RelativeSource={RelativeSource FindAncestor,
                                    AncestorType={x:Type Button},
                                    AncestorLevel=1},
                                    Converter={x:Static local:BooleanToImageConverter.Instance},
                                    ConverterParameter='back'}" />
                </Button>
                <TextBlock Grid.Column="1"
                           Style="{DynamicResource AddressTextBlockStyle}"
                           Text="{Binding LastSourcePath}"
                           TextTrimming="CharacterEllipsis"
                           ToolTipService.InitialShowDelay="500"
                           ToolTipService.BetweenShowDelay="500"
                           ToolTipService.ShowOnDisabled="True"
                           ToolTip="{Binding LastSourcePath}" />
            </Grid>
        </Border>

        <Border Grid.Column="3"
                Grid.Row="4"
                Style="{DynamicResource AddressAreaStyle}">
            <Grid Visibility="{Binding LastSourcePath,
                               Converter={x:Static local:StringToVisibilityConverter.Instance},
                               FallbackValue=Hidden}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Button Grid.Column="0"
                        Style="{StaticResource ImageButton}"
                        Margin="5"
                        Command="{Binding BackButton_Click}"
                        CommandParameter="Target"
                        ToolTipService.InitialShowDelay="500"
                        ToolTipService.BetweenShowDelay="500"
                        ToolTipService.ShowOnDisabled="True"
                        ToolTip="Up one level">
                    <Image Source="{Binding Path=IsEnabled,
                                    RelativeSource={RelativeSource FindAncestor,
                                    AncestorType={x:Type Button},
                                    AncestorLevel=1},
                                    Converter={x:Static local:BooleanToImageConverter.Instance},
                                    ConverterParameter='back'}" />
                </Button>
                <TextBlock Grid.Column="1"
                           Style="{DynamicResource AddressTextBlockStyle}"
                           Text="{Binding LastTargetPath}"
                           TextTrimming="CharacterEllipsis"
                           ToolTipService.InitialShowDelay="500"
                           ToolTipService.BetweenShowDelay="500"
                           ToolTipService.ShowOnDisabled="True"
                           ToolTip="{Binding LastTargetPath}" />
            </Grid>
        </Border>

        <!--Source Display Area-->
        <Grid Grid.Column="1" Grid.Row="5">
            <Border Style="{DynamicResource MainDisplayAreaStyle}">
                <ListView x:Name="SourceList"
                          ItemsSource="{Binding SourceDirectoriesToDisplay}"
                          Background="Transparent"
                          BorderThickness="0"
                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                          ScrollViewer.HorizontalScrollBarVisibility="Auto"
                          ScrollViewer.ScrollChanged="ScrollChanged"
                          HorizontalContentAlignment="Stretch">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDoubleClick">
                            <i:InvokeCommandAction Command="{Binding ExpandSourceDirectory}" CommandParameter="{Binding ElementName=SourceList, Path=SelectedItem}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="30" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Image Grid.Column="0"
                                       VerticalAlignment="Center"
                                       HorizontalAlignment="Center"
                                       Width="20"
                                       Source="{Binding Type,
                                                Converter={x:Static local:ItemTypeToImageConverter.Instance}}" />
                                <TextBlock Grid.Column="1"
                                           VerticalAlignment="Center"
                                           TextTrimming="CharacterEllipsis"
                                           Foreground="{Binding Status,
                                                        Converter={x:Static local:ItemStatusToColorBrushConverter.Instance}}"
                                           FontWeight="SemiBold"
                                           Text="{Binding Item.Name}"
                                           ToolTipService.InitialShowDelay="500"
                                           ToolTipService.BetweenShowDelay="500"
                                           ToolTipService.ShowOnDisabled="True"
                                           ToolTip="{Binding DifferentPath,
                                                     Converter={x:Static local:PathToStringConverter.Instance},
                                                     ConverterParameter='source'}" />
                                <Button Grid.Column="1"
                                        HorizontalAlignment="Right"
                                        Margin="0 0 35 0"
                                        Width="20"
                                        Style="{DynamicResource ManualResolveButton}"
                                        Command="{Binding DataContext.DeleteButton_Click,
                                                  RelativeSource={RelativeSource FindAncestor,
                                                  AncestorType={x:Type Window}}}"
                                        CommandParameter="{Binding}"
                                        ToolTipService.InitialShowDelay="500"
                                        ToolTipService.BetweenShowDelay="500"
                                        ToolTipService.ShowOnDisabled="True"
                                        ToolTip="Delete item">
                                    <Image Source="Assets/delete.png" />
                                </Button>
                                <Button Grid.Column="1"
                                        HorizontalAlignment="Right"
                                        Margin="0 0 10 0"
                                        Width="20"
                                        Style="{DynamicResource ManualResolveButton}"
                                        Command="{Binding DataContext.MergeSource_Click,
                                                  RelativeSource={RelativeSource FindAncestor,
                                                  AncestorType={x:Type Window}}}"
                                        CommandParameter="{Binding}"
                                        ToolTipService.InitialShowDelay="500"
                                        ToolTipService.BetweenShowDelay="500"
                                        ToolTipService.ShowOnDisabled="True"
                                        ToolTip="{Binding Status,
                                                  Converter={x:Static local:ItemStatusToStringConverter.Instance},
                                                  ConverterParameter='source'}">
                                    <Image Source="{Binding Status,
                                                    Converter={x:Static local:ItemStatusToImageConverter.Instance},
                                                    ConverterParameter='source'}" />
                                </Button>
                            </Grid>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Border>
            <Border Background="{Binding ElementName=SourceText,
                                 Path=Text,
                                 Converter={x:Static local:StringToColorBrushConverter.Instance}}"
                    CornerRadius="0 0 6 6"
                    IsHitTestVisible="False">
                <TextBlock x:Name="SourceText"
                           Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                           Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}"
                           Padding="10"
                           Text="{Binding SourceDisplayText}"
                           IsHitTestVisible="False"/>
            </Border>
        </Grid>

        <!--Link Icon-->
        <StackPanel Grid.Column="2"
                    Grid.Row="5"
                    VerticalAlignment="Center">
            <Button Style="{DynamicResource ImageButton}"
                    Width="26"
                    Command="{Binding Link_Click}"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Scroll source and target together">
                <Image Source="{Binding IsLinked,
                                Converter={x:Static local:BooleanToImageConverter.Instance},
                                ConverterParameter='link'}" />
            </Button>
        </StackPanel>
        
        <!--Target Display Area-->
        <Grid Grid.Column="3" Grid.Row="5">
            <Border Style="{DynamicResource MainDisplayAreaStyle}">
                <ListView x:Name="TargetList"
                          ItemsSource="{Binding TargetDirectoriesToDisplay}"
                          Background="Transparent"
                          BorderThickness="0"
                          ScrollViewer.VerticalScrollBarVisibility="Auto"
                          ScrollViewer.HorizontalScrollBarVisibility="Auto"
                          ScrollViewer.ScrollChanged="ScrollChanged"
                          HorizontalContentAlignment="Stretch">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="MouseDoubleClick">
                            <i:InvokeCommandAction Command="{Binding ExpandTargetDirectory}" CommandParameter="{Binding ElementName=TargetList, Path=SelectedItem}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="30" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Image Grid.Column="0"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    Width="20"
                                    Source="{Binding Type,
                                             Converter={x:Static local:ItemTypeToImageConverter.Instance}}" />
                                <TextBlock Grid.Column="1"
                                        VerticalAlignment="Center"
                                        TextTrimming="CharacterEllipsis"
                                        Foreground="{Binding Status,
                                                    Converter={x:Static local:ItemStatusToColorBrushConverter.Instance}}"
                                        FontWeight="SemiBold"
                                        Text="{Binding Item.Name}"
                                           ToolTipService.InitialShowDelay="500"
                                           ToolTipService.BetweenShowDelay="500"
                                           ToolTipService.ShowOnDisabled="True"
                                           ToolTip="{Binding DifferentPath,
                                                     Converter={x:Static local:PathToStringConverter.Instance},
                                                     ConverterParameter='target'}" />
                                <Button Grid.Column="1"
                                        HorizontalAlignment="Right"
                                        Margin="0 0 35 0"
                                        Width="20"
                                        Style="{DynamicResource ManualResolveButton}"
                                        Command="{Binding DataContext.MergeTarget_Click,
                                                  RelativeSource={RelativeSource FindAncestor,
                                                  AncestorType={x:Type Window}}}"
                                        CommandParameter="{Binding}"
                                        ToolTipService.InitialShowDelay="500"
                                        ToolTipService.BetweenShowDelay="500"
                                        ToolTipService.ShowOnDisabled="True"
                                        ToolTip="{Binding Status,
                                                  Converter={x:Static local:ItemStatusToStringConverter.Instance},
                                                  ConverterParameter='target'}">
                                    <Image Source="{Binding Status,
                                                    Converter={x:Static local:ItemStatusToImageConverter.Instance},
                                                    ConverterParameter='target'}" />
                                </Button>
                                <Button Grid.Column="1"
                                        HorizontalAlignment="Right"
                                        Margin="0 0 10 0"
                                        Width="20"
                                        Style="{DynamicResource ManualResolveButton}"
                                        Command="{Binding DataContext.DeleteButton_Click,
                                                  RelativeSource={RelativeSource FindAncestor,
                                                  AncestorType={x:Type Window}}}"
                                        CommandParameter="{Binding}"
                                        ToolTipService.InitialShowDelay="500"
                                        ToolTipService.BetweenShowDelay="500"
                                        ToolTipService.ShowOnDisabled="True"
                                        ToolTip="Delete item">
                                    <Image Source="Assets/delete.png" />
                                </Button>
                            </Grid>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                </ListView>
            </Border>
            <Border Background="{Binding ElementName=TargetText,
                                 Path=Text,
                                 Converter={x:Static local:StringToColorBrushConverter.Instance}}"
                    CornerRadius="0 0 6 6"
                    IsHitTestVisible="False">
                <TextBlock x:Name="TargetText"
                           Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualWidth}"
                           Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ActualHeight}"
                           Padding="10"
                           Text="{Binding TargetDisplayText}"
                           IsHitTestVisible="False"/>
            </Border>
        </Grid>
        
        <!--Main Button Area-->
        <StackPanel Grid.Column="1"
                    Grid.Row="7"
                    Grid.ColumnSpan="3"
                    VerticalAlignment="Center">
            <StackPanel Orientation="Horizontal"
                        HorizontalAlignment="Left">
                <Ellipse Width="10" Height="10" Fill="#FFB4B4B4" Margin="10 0" />
                <TextBlock VerticalAlignment="Center" Text="No Differences" />

                <Ellipse Width="10" Height="10" Fill="#FF7C578B" Margin="49 0 10 0" />
                <TextBlock VerticalAlignment="Center" Text="Exists with different name" />
            </StackPanel>
            <StackPanel Orientation="Horizontal"
                        HorizontalAlignment="Left">
                <Ellipse Width="10" Height="10" Fill="#FFB0892E" Margin="10 0" />
                <TextBlock VerticalAlignment="Center" Text="Different Contents" />

                <Ellipse Width="10" Height="10" Fill="#FFC4514B" Margin="30 0 10 0" />
                <TextBlock VerticalAlignment="Center" Text="Does not exist" />
            </StackPanel>
        </StackPanel>
        <StackPanel Grid.Column="1"
                    Grid.Row="7"
                    Grid.ColumnSpan="3"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right">
            <Button Style="{DynamicResource GeneralButton}"
                    Width="100"
                    Margin="0 0 20 0"
                    Command="{Binding ScanButton_Click}"
                    IsDefault="True"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="{Binding RelativeSource={x:Static RelativeSource.Self},
                            Converter={x:Static local:ButtonEnabledToStringConverter.Instance},
                            ConverterParameter='Compare the source and target for discrepancies (Enter).',
                            Path=IsEnabled, Mode=OneWay}"
                    Content="Scan" />


            <ComboBox Style="{DynamicResource DefaultComboBoxStyle}" VerticalAlignment="Center"
                      Width="100"
                      Height="30"
                      Margin="0 0 7 0"
                      SelectedIndex="{Binding ResolveMethod,
                                      Converter={x:Static local:EnumToIntConverter.Instance},
                                      Mode=TwoWay}"
                      VerticalContentAlignment="Center"
                      Padding="10 0 0 0"
                      ToolTipService.InitialShowDelay="500"
                      ToolTipService.BetweenShowDelay="500"
                      ToolTipService.ShowOnDisabled="True"
                      ToolTip="{Binding RelativeSource={x:Static RelativeSource.Self},
                              Converter={x:Static local:ButtonEnabledToStringConverter.Instance},
                              ConverterParameter='Determines how to handle auto-resolve.',
                              Path=IsEnabled, Mode=OneWay}">
                <ComboBoxItem IsSelected="True" Content="Left To Right" />
                <ComboBoxItem Content="Right To Left" />
            </ComboBox>
            <Button Style="{DynamicResource GeneralButton}"
                    Width="120"
                    Margin="0 0 20 0"
                    Command="{Binding AutoResolveButton_Click}"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="{Binding RelativeSource={x:Static RelativeSource.Self},
                            Converter={x:Static local:ButtonEnabledToStringConverter.Instance},
                            ConverterParameter='Auto-resolve all discrepancies.',
                            Path=IsEnabled, Mode=OneWay}"
                    Content="Auto-Resolve" />

            <Button Style="{DynamicResource GeneralButton}"
                    Width="100"
                    Command="{Binding ClearButton_Click}"
                    IsCancel="True"
                    ToolTipService.InitialShowDelay="500"
                    ToolTipService.BetweenShowDelay="500"
                    ToolTipService.ShowOnDisabled="True"
                    ToolTip="Clears everything (Esc)."
                    Content="Clear" />

        </StackPanel>

        <StackPanel Grid.Column="3"
                    Grid.Row="9"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Center"
                    Visibility="{Binding ProgressVisibility}">

            <TextBlock Text="{Binding ProgressString}"
                       Margin="0 0 10 0"
                       FontSize="11" />
            <ProgressBar Width="120"
                         Height="16"
                         Minimum="0"
                         Maximum="100"
                         Value="{Binding ProgressPercentage}" />
        </StackPanel>
    </Grid>
</Window>
